[{"/Users/stuti/Developer/shit/src/index.js":"1","/Users/stuti/Developer/shit/src/App.js":"2","/Users/stuti/Developer/shit/src/toolboxCategories.js":"3","/Users/stuti/Developer/shit/src/customBlocks/custom_Blocks.js":"4"},{"size":219,"mtime":1682227115524,"results":"5","hashOfConfig":"6"},{"size":3646,"mtime":1682227115523,"results":"7","hashOfConfig":"6"},{"size":27690,"mtime":1682219336582,"results":"8","hashOfConfig":"6"},{"size":8098,"mtime":1682219309102,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"r9dkx6",{"filePath":"13","messages":"14","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"/Users/stuti/Developer/shit/src/index.js",[],["21","22"],"/Users/stuti/Developer/shit/src/App.js",["23","24","25"],"import \"./App.css\";\nimport \"./customBlocks/custom_Blocks\";\nimport React, {useEffect, useState} from \"react\";\nimport { BlocklyWorkspace } from \"react-blockly\";\nimport Blockly from \"blockly\";\nimport pythonGenerator from \"blockly/python\";\nimport {toolboxCategories} from \"./toolboxCategories\";\nimport Image from \"./ImageForLandingPage.png\";\n\nexport default function App() {\n    const [xml, setXml] = useState(\"\");\n    const [pythonCode, setPythonCode] = useState(\"\");\n    useEffect(() =>{\n\n    }, [])\n    const initialXml =\n        '<xml xmlns=\"https://developers.google.com/blockly/xml\"><block type=\"start_selenium\" id=\"6}?:zoYRm3^d??T5//+H\" x=\"73\" y=\"27\"><next><block type=\"import_pd_and_np\" id=\"M%/Zs;4@YZh/-H}~/FP%\"><next><block type=\"go_to_link\" id=\"e~x7NH$WpNRrqKS/o(8V\"><value name=\"url\"><block type=\"text\" id=\"*N}S]fAE:(sWnR66HhtN\"><field name=\"TEXT\">https://hoopshype.com/salaries/players/</field></block></value><next><block type=\"scrape_element_class_name\" id=\"QUJ/j@X.#qMwe9ziH#rz\"><value name=\"name\"><block type=\"text\" id=\"xR$8O2m`0u%N`$TS~v[Z\"><field name=\"TEXT\">Name</field></block></value><value name=\"class_name\"><block type=\"text\" id=\"*s*j[q,a)~LIeYV/qk5y\"><field name=\"TEXT\">name</field></block></value><next><block type=\"scrape_element_class_name\" id=\"snM|Zkdp]G.4%{RSPAkh\"><value name=\"name\"><block type=\"text\" id=\"w~=(2~C^KK;f(jqUKHNu\"><field name=\"TEXT\">Salary</field></block></value><value name=\"class_name\"><block type=\"text\" id=\"76CtNpeaG^dx790mh4{B\"><field name=\"TEXT\">hh-salaries-sorted</field></block></value><next><block type=\"generate_csv\" id=\"7il}[PFMWAhUBXw!5-,#\"><value name=\"name\"><block type=\"text\" id=\"/musb3Z/kU7F$?lPbh^.\"><field name=\"TEXT\">example.csv</field></block></value></block></next></block></next></block></next></block></next></block></next></block></xml>';\n    function workspaceDidChange(workspace) {\n        const code = pythonGenerator.workspaceToCode(workspace);\n        setPythonCode(code);\n    }\n    return (\n        <>\n            <div className=\"BG\">\n                <div style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                }\n                }>\n                    <div className=\"title\">pyscratch</div>\n                    <div className=\"Slogan\">Scratch For <br/> Adults</div>\n                    <div className=\"Subtitle\">A cheesy line that's pog</div>\n                    <div className=\"GSButton\">Get Started</div>\n                </div>\n                <div className=\"Image\">\n                    <img src={Image} alt=\"Image\" width=\"700px\" height=\"800px\"/>\n                </div>\n            </div>\n            <div style={{\n                width: \"100%\",\n                height: \"800px\",\n                backgroundColor: \"#fff\",\n                border: \"1px solid #1e1e1e\",\n            }}>\n            </div>\n            <div style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n            }}>\n                <BlocklyWorkspace\n                    toolboxConfiguration={toolboxCategories}\n                    initialXml={initialXml}\n                    className=\"fill-height\"\n                    workspaceConfiguration={{\n                        theme: \"dark\"\n                    }}\n                    onWorkspaceChange={workspaceDidChange}\n                    onXmlChange={setXml}\n                />\n\n                <textarea\n                    id=\"code\"\n                    style={{ height: \"700px\", width: \"50%\", backgroundColor: \"#1e1e1e\", color: \"white\"}}\n                    value={pythonCode}\n                    readOnly\n                ></textarea>\n            </div>\n        </>\n    );\n}","/Users/stuti/Developer/shit/src/toolboxCategories.js",[],"/Users/stuti/Developer/shit/src/customBlocks/custom_Blocks.js",["26","27","28","29","30","31","32","33","34","35"],"import Blockly from \"blockly\";\nimport 'blockly/python';\n\nBlockly.Blocks['start_selenium'] = {\n    init: function() {\n        this.appendDummyInput()\n            .appendField(\"Start Selenium\");\n        this.setPreviousStatement(true, null);\n        this.setNextStatement(true, null);\n        this.setColour(120);\n        this.setTooltip(\"\");\n        this.setHelpUrl(\"\");\n    }\n};\n\nBlockly.Blocks['go_to_link'] = {\n    init: function() {\n        this.appendValueInput(\"url\")\n            .setCheck(\"String\")\n            .setAlign(Blockly.ALIGN_RIGHT)\n            .appendField(\"Go to URL\");\n        this.setPreviousStatement(true, null);\n        this.setNextStatement(true, null);\n        this.setColour(230);\n        this.setTooltip(\"\");\n        this.setHelpUrl(\"\");\n    }\n};\n\nBlockly.Blocks['click_button_xpath'] = {\n    init: function() {\n        this.appendDummyInput()\n            .appendField(\"Click Button\");\n        this.appendValueInput(\"XPATH\")\n            .setCheck(\"String\")\n            .setAlign(Blockly.ALIGN_RIGHT)\n            .appendField(\"Button XPath\");\n        this.setPreviousStatement(true, null);\n        this.setNextStatement(true, null);\n        this.setColour(290);\n        this.setTooltip(\"\");\n        this.setHelpUrl(\"\");\n    }\n};\n\nBlockly.Blocks['fill_input'] = {\n    init: function() {\n        this.appendDummyInput()\n            .setAlign(Blockly.ALIGN_RIGHT)\n            .appendField(\"Enter Input\");\n        this.appendValueInput(\"input\")\n            .setCheck(\"String\")\n            .setAlign(Blockly.ALIGN_RIGHT)\n            .appendField(\"Input\");\n        this.appendValueInput(\"NAME\")\n            .setCheck(\"String\")\n            .setAlign(Blockly.ALIGN_RIGHT)\n            .appendField(\"XPath\");\n        this.setColour(230);\n        this.setTooltip(\"\");\n        this.setHelpUrl(\"\");\n    }\n};\n\nBlockly.Blocks['click_button_text'] = {\n    init: function() {\n        this.appendDummyInput()\n            .appendField(\"Click Button\");\n        this.appendValueInput(\"Text\")\n            .setCheck(\"String\")\n            .setAlign(Blockly.ALIGN_RIGHT)\n            .appendField(\"Button Text\");\n        this.setPreviousStatement(true, null);\n        this.setNextStatement(true, null);\n        this.setColour(120);\n        this.setTooltip(\"\");\n        this.setHelpUrl(\"\");\n    }\n};\n\nBlockly.Blocks['click_button_class_name'] = {\n    init: function() {\n        this.appendDummyInput()\n            .appendField(\"Click Button\");\n        this.appendValueInput(\"Class Name\")\n            .setCheck(\"String\")\n            .setAlign(Blockly.ALIGN_RIGHT)\n            .appendField(\"Class Name\");\n        this.setPreviousStatement(true, null);\n        this.setNextStatement(true, null);\n        this.setColour(120);\n        this.setTooltip(\"\");\n        this.setHelpUrl(\"\");\n    }\n};\n\nBlockly.Blocks['import_pd_and_np'] = {\n    init: function() {\n        this.appendDummyInput()\n            .setAlign(Blockly.ALIGN_RIGHT)\n            .appendField(\"Import pandas\");\n        this.appendDummyInput()\n            .setAlign(Blockly.ALIGN_RIGHT)\n            .appendField(\"Import NumPy\");\n        this.appendDummyInput()\n            .appendField(\"Create Dataframe\");\n        this.setPreviousStatement(true, null);\n        this.setNextStatement(true, null);\n        this.setColour(230);\n        this.setTooltip(\"\");\n        this.setHelpUrl(\"\");\n    }\n};\n\nBlockly.Blocks['scrape_element_class_name'] = {\n    init: function() {\n        this.appendValueInput(\"name\")\n            .setCheck(\"String\")\n            .setAlign(Blockly.ALIGN_RIGHT)\n            .appendField(\"Name\");\n        this.appendValueInput(\"class_name\")\n            .setCheck(\"String\")\n            .setAlign(Blockly.ALIGN_RIGHT)\n            .appendField(\"Class Name\");\n        this.setPreviousStatement(true, null);\n        this.setNextStatement(true, null);\n        this.setColour(65);\n        this.setTooltip(\"\");\n        this.setHelpUrl(\"\");\n    }\n};\n\nBlockly.Blocks['scrape_element_xpath'] = {\n    init: function() {\n        this.appendValueInput(\"Name\")\n            .setCheck(\"String\")\n            .setAlign(Blockly.ALIGN_RIGHT)\n            .appendField(\"Name\");\n        this.appendValueInput(\"XPATH\")\n            .setCheck(\"String\")\n            .setAlign(Blockly.ALIGN_RIGHT)\n            .appendField(\"XPATH\");\n        this.setPreviousStatement(true, null);\n        this.setNextStatement(true, null);\n        this.setColour(300);\n        this.setTooltip(\"\");\n        this.setHelpUrl(\"\");\n    }\n};\n\nBlockly.Blocks['generate_csv'] = {\n    init: function() {\n        this.appendDummyInput()\n            .appendField(\"Generate CSV\");\n        this.appendValueInput(\"name\")\n            .setCheck(\"String\")\n            .setAlign(Blockly.ALIGN_RIGHT)\n            .appendField(\"CSV Name\");\n        this.setPreviousStatement(true, null);\n        this.setNextStatement(true, null);\n        this.setColour(15);\n        this.setTooltip(\"\");\n        this.setHelpUrl(\"\");\n    }\n};\n\nBlockly.Python['start_selenium'] = function(block) {\n    var code = 'from selenium import webdriver\\n';\n    code += 'from selenium.webdriver.common.keys import Keys\\n';\n    code += 'from selenium.webdriver.common.by import By\\n';\n    code += 'driver = webdriver.Chrome()\\n' + \"\\n\";\n    return code;\n};\n\nBlockly.Python['go_to_link'] = function(block) {\n    var value_url = Blockly.Python.valueToCode(block, 'url', Blockly.Python.ORDER_ATOMIC);\n    var code = 'driver.get(' + value_url + ')\\n' + \"\\n\";\n    return code;\n};\n\nBlockly.Python['click_button_xpath'] = function(block) {\n    var value_xpath = Blockly.Python.valueToCode(block, 'XPATH', Blockly.Python.ORDER_ATOMIC);\n    var code = \"click_button = driver.find_element(By.XPATH,\" + value_xpath + \")\\n\";\n    code += \"click_button.click()\\n\" + \"\\n\";\n    return code;\n};\n\nBlockly.Python['fill_input'] = function(block) {\n    var value_input = Blockly.Python.valueToCode(block, 'input', Blockly.Python.ORDER_ATOMIC);\n    var value_name = Blockly.Python.valueToCode(block, 'NAME', Blockly.Python.ORDER_ATOMIC);\n    var code = 'driver.find_element(By.XPATH,' + value_name + ').send_keys(' + value_input + ')\\n' + \"\\n\";\n    return code;\n};\n\nBlockly.Python['click_button_text'] = function(block) {\n    var value_text = Blockly.Python.valueToCode(block, 'Text', Blockly.Python.ORDER_ATOMIC);\n    var code = \"click_button = driver.find_element(By.LINK_TEXT,\" + value_text + \")\\n\";\n    code += \"click_button.click()\\n\" + \"\\n\"\n    return code;\n};\n\nBlockly.Python['click_button_class_name'] = function(block) {\n    var value_class_name = Blockly.Python.valueToCode(block, 'Class Name', Blockly.Python.ORDER_ATOMIC);\n    var code = \"click_button = driver.find_element(By.CLASS_NAME,\" + value_class_name + \")\\n\";\n    code += \"click_button.click()\\n\" + \"\\n\"\n    return code;\n};\n\nBlockly.Python['import_pd_and_np'] = function(block) {\n    var code = 'import pandas as pd\\n';\n    code += 'import numpy as np\\n';\n    code += 'df = pd.DataFrame()\\n' + \"\\n\";\n    return code;\n};\n\nBlockly.Python['scrape_element_class_name'] = function(block) {\n    var value_name = Blockly.Python.valueToCode(block, 'name', Blockly.Python.ORDER_ATOMIC);\n    var value_class_name = Blockly.Python.valueToCode(block, 'class_name', Blockly.Python.ORDER_ATOMIC);\n    var code = 'scraped_elements = driver.find_elements(By.CLASS_NAME,' + value_class_name + ')\\n';\n    code += 'df[' + value_name + '] = [element.text for element in scraped_elements]\\n' + \"\\n\";\n    return code;\n};\n\nBlockly.Python['scrape_element_xpath'] = function(block) {\n    var value_name = Blockly.Python.valueToCode(block, 'Name', Blockly.Python.ORDER_ATOMIC);\n    var value_xpath = Blockly.Python.valueToCode(block, 'XPATH', Blockly.Python.ORDER_ATOMIC);\n    var code = 'scraped_elements = driver.find_elements(By.XPATH,' + value_xpath + ')\\n';\n    code += 'df[' + value_name + '] = [element.text for element in scraped_elements]\\n' + \"\\n\";\n    return code;\n};\n\nBlockly.Python['generate_csv'] = function(block) {\n    var value_name = Blockly.Python.valueToCode(block, 'name', Blockly.Python.ORDER_ATOMIC);\n    var code = 'df.to_csv(' + value_name + ')\\n' + \"\\n\";\n    return code;\n};",{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":5,"column":8,"nodeType":"42","messageId":"43","endLine":5,"endColumn":15},{"ruleId":"40","severity":1,"message":"44","line":11,"column":12,"nodeType":"42","messageId":"43","endLine":11,"endColumn":15},{"ruleId":"45","severity":1,"message":"46","line":36,"column":21,"nodeType":"47","endLine":36,"endColumn":80},{"ruleId":"48","severity":1,"message":"49","line":171,"column":45,"nodeType":"50","messageId":"51","endLine":171,"endColumn":46},{"ruleId":"48","severity":1,"message":"49","line":177,"column":50,"nodeType":"50","messageId":"51","endLine":177,"endColumn":51},{"ruleId":"48","severity":1,"message":"49","line":184,"column":38,"nodeType":"50","messageId":"51","endLine":184,"endColumn":39},{"ruleId":"48","severity":1,"message":"49","line":191,"column":100,"nodeType":"50","messageId":"51","endLine":191,"endColumn":101},{"ruleId":"48","severity":1,"message":"49","line":198,"column":38,"nodeType":"50","messageId":"51","endLine":198,"endColumn":39},{"ruleId":"48","severity":1,"message":"49","line":205,"column":38,"nodeType":"50","messageId":"51","endLine":205,"endColumn":39},{"ruleId":"48","severity":1,"message":"49","line":212,"column":37,"nodeType":"50","messageId":"51","endLine":212,"endColumn":38},{"ruleId":"48","severity":1,"message":"49","line":220,"column":89,"nodeType":"50","messageId":"51","endLine":220,"endColumn":90},{"ruleId":"48","severity":1,"message":"49","line":228,"column":89,"nodeType":"50","messageId":"51","endLine":228,"endColumn":90},{"ruleId":"48","severity":1,"message":"49","line":234,"column":50,"nodeType":"50","messageId":"51","endLine":234,"endColumn":51},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'Blockly' is defined but never used.","Identifier","unusedVar","'xml' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-global-assign","no-unsafe-negation"]